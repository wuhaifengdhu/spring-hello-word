<?xml version="1.0" encoding="UTF-8"?>
<beans default-lazy-init = "true"
	xmlns="http://www.springframework.org/schema/beans"
    xmlns:sec="http://www.springframework.org/schema/security"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:oauth2="http://www.springframework.org/schema/security/oauth2"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
            http://www.springframework.org/schema/beans/spring-beans-4.3.xsd 
            http://www.springframework.org/schema/security/oauth2
      		http://www.springframework.org/schema/security/spring-security-oauth2-1.0.xsd
            http://www.springframework.org/schema/security 
            http://www.springframework.org/schema/security/spring-security-4.1.xsd">
                    
    <!-- setup token services url -->
	<sec:http pattern="/oauth/token" create-session="stateless"
		authentication-manager-ref="oauth2AuthenticationManager">
		<sec:intercept-url pattern="/oauth/token" access="fullyAuthenticated" />
		<sec:anonymous enabled="false" />
		<sec:http-basic entry-point-ref="oauth2AuthenticationEntryPoint" />
		<sec:custom-filter ref="clientCredentialsTokenEndpointFilter"
			before="BASIC_AUTH_FILTER" />
		<sec:access-denied-handler ref="oauth2AccessDeniedHandler" />
		<sec:csrf disabled="true"/>
	</sec:http>
	
	<!-- apis which needs the token to access -->
	<sec:http pattern="/api/**" create-session="never"
		entry-point-ref="oauth2AuthenticationEntryPoint"
		access-decision-manager-ref="oauth2AccessDecisionManager">
		<sec:anonymous enabled="false" />
		<sec:intercept-url pattern="/api/**" access="isAuthenticated()" />
		<sec:custom-filter ref="mobileResourceServer" before="PRE_AUTH_FILTER" />
		<sec:access-denied-handler ref="oauth2AccessDeniedHandler" />
		<sec:csrf disabled="true"/>
	</sec:http>
            
    <!-- spring security for general webpages -->
    <sec:http auto-config="true" use-expressions="true">
    	<sec:intercept-url pattern="/login*" access="permitAll"/>
        <sec:intercept-url pattern="/logout*" access="permitAll"/>
        <sec:intercept-url pattern="/signin/**" access="permitAll"/>
        <sec:intercept-url pattern="/signup/**" access="permitAll"/>
        <sec:intercept-url pattern="/user/registration*" access="permitAll"/>
        <sec:intercept-url pattern="/regitrationConfirm*" access="permitAll"/>
        <sec:intercept-url pattern="/successRegister*" access="permitAll"/>
        <sec:intercept-url pattern="/expiredAccount*" access="permitAll"/>
        <sec:intercept-url pattern="/registration*" access="permitAll"/>
        <sec:intercept-url pattern="/badUser*" access="permitAll"/>
        <sec:intercept-url pattern="/user/resendRegistrationToken*" access="permitAll"/>
        <sec:intercept-url pattern="/forgetPassword*" access="permitAll"/>
        <sec:intercept-url pattern="/user/forgetPassword*" access="permitAll"/>
        <sec:intercept-url pattern="/user/changePassword*" access="permitAll"/>
        <sec:intercept-url pattern="/emailError*" access="permitAll"/>
        <sec:intercept-url pattern="/resources/**" access="permitAll"/>
        <sec:intercept-url pattern="/invalidSession*" access="isAnonymous()"/>
        
        <sec:intercept-url pattern="/**" access="isAuthenticated()"/>
        
        <sec:csrf disabled="true"/>
        
        <sec:form-login login-page='/login'
            			authentication-success-handler-ref="authenticationSuccessHandler"
            			authentication-failure-handler-ref="authenticationFailureHandler"
            			default-target-url="/homepage.html"/>

    	<sec:session-management invalid-session-url="/invalidSession.html" session-fixation-protection="none"/>
        
        <sec:logout invalidate-session="false" logout-success-url="/logout.html?logSucc=true" delete-cookies="JSESSIONID"/>
    </sec:http>
    
    
    
    <!-- create OAuth2 token service database tables (in the file schema.sql) -->
	<bean class="org.springframework.jdbc.datasource.init.DataSourceInitializer">
		<property name="databasePopulator" ref="resourceDatabasePopulator" />
		<property name="dataSource" ref="dataSource" />
	</bean>
	
	<bean id="resourceDatabasePopulator"
		class="org.springframework.jdbc.datasource.init.ResourceDatabasePopulator">
		<property name="scripts">
			<array>
				<value>classpath:oauthsql/schema.sql</value>
			</array>
		</property>
	</bean>
	
	
    
    <!-- configure the client details service, can add more clients into database -->
    <bean id="clientDetailsService" class="org.springframework.security.oauth2.provider.client.JdbcClientDetailsService">
        <constructor-arg index="0" ref="dataSource"/>
    </bean>
    
    
    
    <!-- store token into database with jdbc dataSource -->
	<bean id="tokenStore" class="org.springframework.security.oauth2.provider.token.store.JdbcTokenStore">  
	    <constructor-arg index="0" ref="dataSource"/>  
	</bean>
	
	<!-- setup token service (using the default token service) -->
	<bean id="tokenServices" class="org.springframework.security.oauth2.provider.token.DefaultTokenServices">  
	    <property name="tokenStore" ref="tokenStore"/>  
	    <property name="supportRefreshToken" value="true"/>
	    <property name="accessTokenValiditySeconds" value="2592000"></property> <!-- ONE month period 2592000-->
	    <property name="clientDetailsService" ref="clientDetailsService"/> <!-- specify the client details information -->
	</bean>
	
	<!-- define the resource server -->
	<oauth2:resource-server id="mobileResourceServer" resource-id="mobile-resource" token-services-ref="tokenServices" />
	
	
	
	<!-- setup OAuth2 client details User Services which refer to the client details service -->
	<bean id="oauth2ClientDetailsUserService"  
	            class="org.springframework.security.oauth2.provider.client.ClientDetailsUserDetailsService">  
	    <constructor-arg ref="clientDetailsService"/>  
	</bean>
	
	<!-- setup OAuth2 access deny default handler -->
	<bean id="oauth2AccessDeniedHandler"  
            class="org.springframework.security.oauth2.provider.error.OAuth2AccessDeniedHandler"/>
    
    <!-- setup default approval default handler, can be specified -->       
    <bean id="oauthUserApprovalHandler" class="org.springframework.security.oauth2.provider.approval.DefaultUserApprovalHandler">
    <!-- property settings -->
	</bean>
	
	<!-- configure the OAuth2 Entry Point -->
	<bean id="oauth2AuthenticationEntryPoint"  
            class="org.springframework.security.oauth2.provider.error.OAuth2AuthenticationEntryPoint">
        <property name="realmName" value="mobile-resource/client" />
        <property name="typeName" value="Basic" />
    </bean>
    
    
    
    <!-- setup authentication manager refer to the OAuth2 client details User Services to verify the client-->        
    <sec:authentication-manager id="oauth2AuthenticationManager">  
	    <sec:authentication-provider user-service-ref="oauth2ClientDetailsUserService"/>  
	</sec:authentication-manager>
	
	<!-- setup user authentication manager to verify the user -->
	<sec:authentication-manager id="oauthAuthenticationManager">
        <sec:authentication-provider ref="authProvider"/>
    </sec:authentication-manager>
    
    <bean id="authProvider" class="org.springframework.security.authentication.dao.DaoAuthenticationProvider">
        <property name="userDetailsService" ref="userDetailsService"/>
        <property name="passwordEncoder" ref="passwordEncoder"/>
    </bean>
    
    <bean id="passwordEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder">
        <constructor-arg value="11"/>
    </bean>
    
    
	
	<!-- setup authorization server by using the clientDetailsService, tokenServices and approvalHandler -->
	<oauth2:authorization-server client-details-service-ref="clientDetailsService" token-services-ref="tokenServices"  
	                             user-approval-handler-ref="oauthUserApprovalHandler">  
	    <oauth2:authorization-code/>  
	    <oauth2:implicit/>  
	    <oauth2:refresh-token/>  
	    <oauth2:client-credentials/>
	    <oauth2:password authentication-manager-ref="oauthAuthenticationManager"/> <!-- specify the user authentication manager --> 
	</oauth2:authorization-server>
	
	
	
	<!-- setup access decision manager -->
	<bean id="oauth2AccessDecisionManager" class="org.springframework.security.access.vote.UnanimousBased">  
	    <constructor-arg>  
	        <list>  
	            <bean class="org.springframework.security.oauth2.provider.vote.ScopeVoter"/>  
	            <bean class="org.springframework.security.access.vote.AuthenticatedVoter"/>
	            <bean class="org.springframework.security.web.access.expression.WebExpressionVoter"/> 
	        </list>  
	    </constructor-arg>  
	</bean>
	
	
	
	<!-- configure the token end point filter refer to OAuth2 Authentication Manager -->
	<bean id="clientCredentialsTokenEndpointFilter"
		class="org.springframework.security.oauth2.provider.client.ClientCredentialsTokenEndpointFilter">
		<property name="authenticationManager" ref="oauth2AuthenticationManager" />
	</bean>
	
</beans>